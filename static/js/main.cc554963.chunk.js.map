{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","letter","setLetter","count","setCount","play","setPlay","numPlayers","setNumPlayers","getRandomItem","arr","Math","floor","random","length","step","nextLetter","e","document","querySelector","deg","console","log","getDisplayDeg","style","transform","useEffect","interval","setInterval","clearInterval","className","for","type","onChange","target","value","name","disabled","min","max","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,kC,oHCsG5BC,MAlGf,WAGI,IAHW,EAIiBC,mBAAS,IAJ1B,mBAIJC,EAJI,KAIIC,EAJJ,OAKeF,mBAAS,GALxB,mBAKJG,EALI,KAKGC,EALH,OAMaJ,oBAAS,GANtB,mBAMJK,EANI,KAMEC,EANF,OAQyBN,mBAAS,GARlC,mBAQJO,EARI,KAQQC,EARR,KAWPC,EAAgB,SAACC,GACjB,OAAOA,EAAIC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,UAiB1CC,EAAO,WAEP,GAAIV,EAAM,CACN,IAAIW,EAAa,GAEbA,EAAaP,EADF,MAAXR,GAA6B,KAAXA,EACS,CAAC,IAAK,KAEN,CAAC,IAAK,IAAK,MAE1CC,EAAUc,GAEVZ,GAAS,SAAAD,GAAK,OAAIA,EAAQ,KAE1B,IAAIc,EAAIC,SAASC,cAAc,oBAE3BC,EAxBQ,SAACb,EAAYJ,GAC7BkB,QAAQC,IAAR,iBAAsBnB,IACtBkB,QAAQC,IAAR,sBAA2Bf,IAC3B,IAAIa,EAAO,IAAMb,GAAeJ,EAAQI,GAExC,OADAc,QAAQC,IAAR,mBAAwBF,IACjBA,EAmBOG,CAAchB,EAAYJ,GACpCc,EAAEO,MAAMC,UAAR,iBAA8BL,EAA9B,UAyBR,OAlBAM,qBAAU,WACN,IAAMC,EAAWC,aAAY,WACzBb,MAnDM,KAqDV,OAAO,kBAAMc,cAAcF,MAC5B,CAACtB,EAAMF,EAAOI,IAcb,yBAAKuB,UAAU,aACX,2BAAOC,IAAI,cAAX,sBACA,2BACIC,KAAK,SACLC,SATQ,SAAChB,GACjBT,EAAcS,EAAEiB,OAAOC,QASfC,KAAK,aACLC,SAAUhC,EACViC,IAAI,IACJC,IAAI,MAER,4BAAQC,QArBC,WACbnB,QAAQC,IAAI,wBACZhB,GAASD,GACTD,EAAS,KAkByBC,EAAO,OAAS,SAC9C,wCACeF,GAEf,uCACcI,GAGd,yBACIuB,UAAU,mBAET7B,KCpFGwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.cc554963.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\n    //Game set up\n    const delay = 2000; //delay in ms\n    const [letter, setLetter] = useState(\"\");\n    const [count, setCount] = useState(0);\n    const [play, setPlay] = useState(false);\n    //Displays\n    const [numPlayers, setNumPlayers] = useState(2);\n\n    //Given array, return random\n    let getRandomItem = (arr) => {\n        return arr[Math.floor(Math.random() * arr.length)]\n    }\n\n    //Given count and number of players, return deg of rotation\n    // 2 players => 0,180,0, 180\n    // 3 players => 0,120, 240, 0\n    // 4 players => 0,90, 180, 270, 0\n\n    let getDisplayDeg = (numPlayers, count) => {\n        console.log(`Count: ${count}`);\n        console.log(`NumPlayers: ${numPlayers}`);\n        let deg = (360 / numPlayers) * (count % numPlayers);\n        console.log(`Degrees: ${deg}`);\n        return deg;\n    }\n\n    //Function to set next letter\n    let step = () => {\n        // console.log(count);\n        if (play) {\n            let nextLetter = \"\";\n            if (letter === \"A\" || letter === \"\") {\n                nextLetter = getRandomItem([\"S\", \"Q\"])\n            } else {\n                nextLetter = getRandomItem([\"Q\", \"S\", \"A\"])\n            }\n            setLetter(nextLetter);\n            // let c = count;\n            setCount(count => count + 1);\n\n            let e = document.querySelector(\".letter__display\");\n            // even, then 0, odd then 180\n            let deg = getDisplayDeg(numPlayers, count);\n            e.style.transform = `rotate(${deg}deg)`\n            // console.log(e)\n\n        }\n    }\n\n    //Use interval in useEffect\n    useEffect(() => {\n        const interval = setInterval(() => {\n            step();\n        }, delay);\n        return () => clearInterval(interval);\n    }, [play, count, numPlayers]);\n\n    //Start Stop Toggle\n    let togglePlay = () => {\n        console.log(\"toggle play clicked.\")\n        setPlay(!play);\n        setCount(0);\n    }\n\n    let changeHandler = (e) => {\n        setNumPlayers(e.target.value);\n    }\n\n    return (\n        <div className=\"container\">\n            <label for=\"numplayers\">Number of players:</label>\n            <input\n                type=\"number\"\n                onChange={changeHandler}\n                name=\"numplayers\"\n                disabled={play}\n                min=\"1\"\n                max=\"5\"\n            />\n            <button onClick={togglePlay}>{play ? \"Stop\" : \"Start\"}</button>\n            <p>\n                Round No: {count}\n            </p>\n            <p>\n                Players: {numPlayers}\n            </p>\n\n            <div\n                className=\"letter__display\"\n            >\n                {letter}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}